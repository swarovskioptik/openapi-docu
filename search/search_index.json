{"config":{"lang":["en"],"min_search_length":3,"prebuild_index":false,"separator":"[\\s\\-]+"},"docs":[{"location":"","text":"Swarovski Optik OpenAPI Documentation Welcome to the Swarovski Optik OpenAPI Documentation. Here you will find all the materials to understand, learn and build applications that connect to the AX Visio . Quick-Start Guide The following steps are a quick-start guide to build an Android Application: Get a working Android Application Developement Setup , own your personal computer. E.g., you need to install AndroidStudio . Go to Github and clone the openapi-developer-example-app repository. Read the README.md and add your API key, that you have received from Swarovski Optik, to the gradle project files. Build, deploy and run the application with Android Studio on your smartphone. Follow the instructions on the application's screen. It walks you through the steps to connect your smartphone to the AX Visio and start the OpenAPI Inside application. Congratulations! You have built your first Android Application that uses the OpenAPI of the AX Visio. This was a very short and very brief step by step guide. You find a more detailed tutorial here: Using the example application More documentation Apart from the quick-start guide this website contains a lot more documentation. On the left side, you see the navigation menu. It contains an explanations section. There, you can learn and understand more about the concepts and functionalities. The tutorials section contains detailed step-by-step guides to walk you through the process of building and using the example application and requesting an API key. The How-To guides sections cover in-depth topics to achieve various goals. And last but not least, the references section contains information and reference material that should help you while you are implementing your own application ideas. Prerequisite If you want to start developing Android applications for the AX Visio using the OpenAPI, you need a AX Visio binocular. There is currently no emulator or sandbox to start development right away on your personal computer. Please contact developers@swarovskoptik.com for the possibility of development devices. Support If you have any further questions or remarks, do not hesitate to contact us. Just email developers@swarovskoptik.com . We are looking forward to trying out your app with the AX Visio. Documentation in an early stage The OpenAPI documentation is in an early stage. There is a lot of potential for improvement. If you have suggestions or feedback, just contact us. We will try to provide the additional material and updates in a timely manner.","title":"Home"},{"location":"#swarovski-optik-openapi-documentation","text":"Welcome to the Swarovski Optik OpenAPI Documentation. Here you will find all the materials to understand, learn and build applications that connect to the AX Visio .","title":"Swarovski Optik OpenAPI Documentation"},{"location":"#quick-start-guide","text":"The following steps are a quick-start guide to build an Android Application: Get a working Android Application Developement Setup , own your personal computer. E.g., you need to install AndroidStudio . Go to Github and clone the openapi-developer-example-app repository. Read the README.md and add your API key, that you have received from Swarovski Optik, to the gradle project files. Build, deploy and run the application with Android Studio on your smartphone. Follow the instructions on the application's screen. It walks you through the steps to connect your smartphone to the AX Visio and start the OpenAPI Inside application. Congratulations! You have built your first Android Application that uses the OpenAPI of the AX Visio. This was a very short and very brief step by step guide. You find a more detailed tutorial here: Using the example application","title":"Quick-Start Guide"},{"location":"#more-documentation","text":"Apart from the quick-start guide this website contains a lot more documentation. On the left side, you see the navigation menu. It contains an explanations section. There, you can learn and understand more about the concepts and functionalities. The tutorials section contains detailed step-by-step guides to walk you through the process of building and using the example application and requesting an API key. The How-To guides sections cover in-depth topics to achieve various goals. And last but not least, the references section contains information and reference material that should help you while you are implementing your own application ideas.","title":"More documentation"},{"location":"#prerequisite","text":"If you want to start developing Android applications for the AX Visio using the OpenAPI, you need a AX Visio binocular. There is currently no emulator or sandbox to start development right away on your personal computer. Please contact developers@swarovskoptik.com for the possibility of development devices.","title":"Prerequisite"},{"location":"#support","text":"If you have any further questions or remarks, do not hesitate to contact us. Just email developers@swarovskoptik.com . We are looking forward to trying out your app with the AX Visio.","title":"Support"},{"location":"#documentation-in-an-early-stage","text":"The OpenAPI documentation is in an early stage. There is a lot of potential for improvement. If you have suggestions or feedback, just contact us. We will try to provide the additional material and updates in a timely manner.","title":"Documentation in an early stage"},{"location":"impressum/","text":"Impressum Details: SWAROVSKI OPTIK AG & Co KG. Daniel-Swarovski-Stra\u00dfe 70 A-6067 Absam E-Mail: customerservice@swarovskioptik.com http://www.swarovskioptik.com Telefon: 00800 3242 5056 Fax: +43 (0) 5223 / 418 60","title":"Impressum"},{"location":"impressum/#impressum","text":"Details: SWAROVSKI OPTIK AG & Co KG. Daniel-Swarovski-Stra\u00dfe 70 A-6067 Absam E-Mail: customerservice@swarovskioptik.com http://www.swarovskioptik.com Telefon: 00800 3242 5056 Fax: +43 (0) 5223 / 418 60","title":"Impressum"},{"location":"support/","text":"Getting Help If you have any further questions or remarks, do not hesitate to contact us. Just email developers@swarovskoptik.com . We are looking forward to trying out your app with the AX Visio.","title":"Getting Help"},{"location":"support/#getting-help","text":"If you have any further questions or remarks, do not hesitate to contact us. Just email developers@swarovskoptik.com . We are looking forward to trying out your app with the AX Visio.","title":"Getting Help"},{"location":"exp/ax-visio/","text":"AX Visio The AX Visio is a new AI supported binocular by Swarovski Optik . For the product details see the page Binoculars > AX Visio > AX Visio . Technical Details This introduction only describes the AX Visio relevant details for using OpenAPI. For additional guidance see the User Manual of the AX Visio on the page AX Visio > Downlaods . Mode Selection Wheel The mode selection wheel, or just selection wheel, is in the center of the binocular. It controls which application is currently active. There are eight different symbols on the selection wheel. For example a symbol for the camera application or a symbol for the Merlin Bird Id application. The OpenAPI functionality and app has the following symbol: To activate an application you have to rotate the selection wheel until the symbol is at the top of the binocular. Buttons The AX Visio has three buttons. There named as following: release button (big dot icon): bottom left on the image arrow button (arrow icon): bottom right on the image power button (power icon): upper right on the image Additionally the release button has two different press states, half pressed and fully pressed. The power button is also special. It can only be used to power on or off the device or turn on and off the display. It does not control the functionalities inside the apps. To control the apps you only use the release and the arrow button. Inside vs Outside Applications In the context of the AX Visio you have to distinguish between two different kind of applications or apps. There are applications that run on the binocular itself. E.g. the Camera Application or the Merlin Bird Id application. These can be started or activated by rotating the mode selection wheel. These apps are called Inside applications. And there are applications that run on your personal smartphone and connect to the AX Visio. E.g. the Swarovski Optik Outdoor App or an third party Application that uses the OpenAPI to connect to the binocular. These apps are called Outside applications. Display Screen The AX Visio contains a semi transparent display in the right eyepiece. So you see the real world and additional the UI elements of currently active application. The display is a monochrome display and the display color is red. So it can only draw red pixels with different opacities. Camera The camera of the AX Visio is located between the two eyepieces. When it takes an image, it does not capture exactly the same view as the human observer. The camera has it's on optical path. Nevertheless the optical camera setup tries mimic the optical properties of the human eyepieces.","title":"AX Visio"},{"location":"exp/ax-visio/#ax-visio","text":"The AX Visio is a new AI supported binocular by Swarovski Optik . For the product details see the page Binoculars > AX Visio > AX Visio .","title":"AX Visio"},{"location":"exp/ax-visio/#technical-details","text":"This introduction only describes the AX Visio relevant details for using OpenAPI. For additional guidance see the User Manual of the AX Visio on the page AX Visio > Downlaods .","title":"Technical Details"},{"location":"exp/ax-visio/#mode-selection-wheel","text":"The mode selection wheel, or just selection wheel, is in the center of the binocular. It controls which application is currently active. There are eight different symbols on the selection wheel. For example a symbol for the camera application or a symbol for the Merlin Bird Id application. The OpenAPI functionality and app has the following symbol: To activate an application you have to rotate the selection wheel until the symbol is at the top of the binocular.","title":"Mode Selection Wheel"},{"location":"exp/ax-visio/#buttons","text":"The AX Visio has three buttons. There named as following: release button (big dot icon): bottom left on the image arrow button (arrow icon): bottom right on the image power button (power icon): upper right on the image Additionally the release button has two different press states, half pressed and fully pressed. The power button is also special. It can only be used to power on or off the device or turn on and off the display. It does not control the functionalities inside the apps. To control the apps you only use the release and the arrow button.","title":"Buttons"},{"location":"exp/ax-visio/#inside-vs-outside-applications","text":"In the context of the AX Visio you have to distinguish between two different kind of applications or apps. There are applications that run on the binocular itself. E.g. the Camera Application or the Merlin Bird Id application. These can be started or activated by rotating the mode selection wheel. These apps are called Inside applications. And there are applications that run on your personal smartphone and connect to the AX Visio. E.g. the Swarovski Optik Outdoor App or an third party Application that uses the OpenAPI to connect to the binocular. These apps are called Outside applications.","title":"Inside vs Outside Applications"},{"location":"exp/ax-visio/#display-screen","text":"The AX Visio contains a semi transparent display in the right eyepiece. So you see the real world and additional the UI elements of currently active application. The display is a monochrome display and the display color is red. So it can only draw red pixels with different opacities.","title":"Display Screen"},{"location":"exp/ax-visio/#camera","text":"The camera of the AX Visio is located between the two eyepieces. When it takes an image, it does not capture exactly the same view as the human observer. The camera has it's on optical path. Nevertheless the optical camera setup tries mimic the optical properties of the human eyepieces.","title":"Camera"},{"location":"exp/openapi/","text":"OpenAPI The OpenAPI is provided by the OpenAPI Inside App. The logo of the OpenAPI is A user has to select the OpenAPI App on the selection wheel. Otherwise the contexts are not available and the outside app cannot uses the contexts. If the app is selected on the selection wheel, but the contexts are not available, the user may has to press the power button. The contexts are only provided when the screen is turned on. Available Contexts When the OpenAPI Inside App is selected on the selection wheel the following contexts are available and can be used with the API key: OpenAPIContext OpenAPIContextBLE SystemContext PicturePreviewContext PictureContext VideoPreviewContext VideoContext LiveStreamContext OpenAPI Inside App selected When no client is connected to the OpenAPI Inside App, the app shows the text Please Connect on the AX Visio. If your app has successfully used to the OpenAPIContext or the OpenAPIContextBLE the screen is not turned off automatically anymore. The screen and device stays awake as long as your app uses these contexts. You should either use the OpenAPIConext or the OpenAPIContextBLE. Using both contexts at the same time, is an error and shows a warning in the InsideApp UI. Changes of the selection wheel Your app must observe the availableContexts . The OpenAPI context may be withdrawn at any time. E.g. in the following cases The user selects a different App on the selection wheel The user presses the power button and the screen turns off The InsideApp crashes In these cases the Outside App should notify the user and wait for the OpenAPI contexts. If they become available again, it can reuse the context. If the Outside App unuses the OpenAPI context or the OpenAPI Inside App withdraws the contexts, the OpenAPI Inside App resets all internal state. E.g. the Outside App must reregister all KeyListeners or KeyACtionProcedures , when it uses the OpenAPI context again. KeyListener The AX Visio has three different keys or buttons: The power button, the scroll button and the release button. See AX Visio > Buttons for details. In the OpenAPI these three different keys and two states are represented as the string constants: OK_KEY_HALF OK_KEY_FULL POWER_KEY SCROLL_KEY The OpenAPI allows to register a KeyListeners to detect the key press and key release event. This works on all keys and states, except the power key. The power key is documented in the OpenAPI, but it's exclusively used by the device to turn on or off the screen and to power off the device. A KeyListener is specific to a single key. If you want to listen on more keys you have to register multiple listeners. There is no usage counter on the KeyListeners. If the outside app registers a listener for a single key two or more times, a single unregister call is sufficient to unregister the listener. KeyActionProcedure The Outside App can configure different KeyActionProcedure . These are predefined actions for the keys on the AX Visio. E.g. to take a picture or to start and stop a video recording. All available actions are documented here: ConfigureKeyActionProcedure.Params A KeyActionProcedure consists of the actual procedure, the key and the action. The action is the direction of the key press, either down or up. For a given (key, action) combination only a single procedure can be configured. If you configure another procedure for the same (key, action) combination it replaces the previous one. To deconfigure a procedure, use the empty string as the procedure name. RenderText and RenderPixelGraphic The OpenAPI allows the Outside Apps to display text and PNG on the AX Visio. RenderText The outside app can draw one lined text strings on the AX Visio with the RenderText topic. The position on the screen is specified in a normal x,y coordinate system. To calculate the middle of the screen or the bottom half of the screen, you have to first query the screen resolution using the GetDisplayResolution topic. The outside app can draw up to five different text strings at the same time on the AX Visio. If the outside app sends more than five text strings to the AX Visio, the oldest text is removed. It's a first-in-first-out queue. RenderPixelGraphic The Outside App can also draw arbitrary graphics on the AX Visio using the RenderPixelGraphic topic. There are two graphics slot in the AX Visio. One slot for a rotated image and one slot for a non-rotated image. If the Outside App sends a new graphic before the duration of the old graphic is elapsed, the new graphic replaces the old one. The Outside App's image is not scaled. It's drawn at the same size on the AX Visio. The current drawable resolution of the AX Visio display is 1366x768. Furthermore the image is drawn at the center of the AX Visio screen, which is the important visual view area for a user. So the image does not have to be the same resolution as the AX Visio screen. It can be smaller and only cover the area that the Outside App wants to draw in the center of the view. The border of the screen is hard to see and recognizable by the user. The image can be grayscale. It should mostly only use white and transparency. Black is not visible on the display. RGB images work technically, too, but are shown as grayscale on the monochrome AX Visio display. MediaClient Try to avoid using the PictureTopics or the VideoTopics directly. It's recommend to use the MediaClient library. It will handle the download of pictures and vidoes for you. It also writes the files to a shared storage, so multiple different apps can use them. LiveStreamContext The AX Visio can provide a RTSP video stream which can be received by the Outside App, e.g. with the Android MediaPlayer. The Outside App can activate the LiveStreamContext with the OpenAPI StartLiveVideoStreaming topic and stop it with StopLiveVideoStreaming topic. When the Outside App starts to use the LiveStreamContext, the Video stream and RSTP server is started on the AX Visio. After using the context, the Outside app can subscribe to the LiveStreamStatus to receive the details about the video stream. While handling this topic, the Outside App should take care of the following points: Check for the URL value RTSP URL NOT AVAILABLE or non-valid RTSP URLs. The AX Visio sends it when there is no RTSP server running anymore. This topic is also send when a client connects and disconnect. See field activeClients . It changes regularly. So if the Outside App restarts the stream on every topic change, it creates a endless feedback loop, because the field activeClients changes when the client itself connects and disconnects. If you want to change the resolution of the RTSP video stream, you can use the topic SetLiveStreamSettings . The currently only available resolutions are 640x480 1280x720 1920x1080","title":"OpenAPI"},{"location":"exp/openapi/#openapi","text":"The OpenAPI is provided by the OpenAPI Inside App. The logo of the OpenAPI is A user has to select the OpenAPI App on the selection wheel. Otherwise the contexts are not available and the outside app cannot uses the contexts. If the app is selected on the selection wheel, but the contexts are not available, the user may has to press the power button. The contexts are only provided when the screen is turned on.","title":"OpenAPI"},{"location":"exp/openapi/#available-contexts","text":"When the OpenAPI Inside App is selected on the selection wheel the following contexts are available and can be used with the API key: OpenAPIContext OpenAPIContextBLE SystemContext PicturePreviewContext PictureContext VideoPreviewContext VideoContext LiveStreamContext","title":"Available Contexts"},{"location":"exp/openapi/#openapi-inside-app-selected","text":"When no client is connected to the OpenAPI Inside App, the app shows the text Please Connect on the AX Visio. If your app has successfully used to the OpenAPIContext or the OpenAPIContextBLE the screen is not turned off automatically anymore. The screen and device stays awake as long as your app uses these contexts. You should either use the OpenAPIConext or the OpenAPIContextBLE. Using both contexts at the same time, is an error and shows a warning in the InsideApp UI.","title":"OpenAPI Inside App selected"},{"location":"exp/openapi/#changes-of-the-selection-wheel","text":"Your app must observe the availableContexts . The OpenAPI context may be withdrawn at any time. E.g. in the following cases The user selects a different App on the selection wheel The user presses the power button and the screen turns off The InsideApp crashes In these cases the Outside App should notify the user and wait for the OpenAPI contexts. If they become available again, it can reuse the context. If the Outside App unuses the OpenAPI context or the OpenAPI Inside App withdraws the contexts, the OpenAPI Inside App resets all internal state. E.g. the Outside App must reregister all KeyListeners or KeyACtionProcedures , when it uses the OpenAPI context again.","title":"Changes of the selection wheel"},{"location":"exp/openapi/#keylistener","text":"The AX Visio has three different keys or buttons: The power button, the scroll button and the release button. See AX Visio > Buttons for details. In the OpenAPI these three different keys and two states are represented as the string constants: OK_KEY_HALF OK_KEY_FULL POWER_KEY SCROLL_KEY The OpenAPI allows to register a KeyListeners to detect the key press and key release event. This works on all keys and states, except the power key. The power key is documented in the OpenAPI, but it's exclusively used by the device to turn on or off the screen and to power off the device. A KeyListener is specific to a single key. If you want to listen on more keys you have to register multiple listeners. There is no usage counter on the KeyListeners. If the outside app registers a listener for a single key two or more times, a single unregister call is sufficient to unregister the listener.","title":"KeyListener"},{"location":"exp/openapi/#keyactionprocedure","text":"The Outside App can configure different KeyActionProcedure . These are predefined actions for the keys on the AX Visio. E.g. to take a picture or to start and stop a video recording. All available actions are documented here: ConfigureKeyActionProcedure.Params A KeyActionProcedure consists of the actual procedure, the key and the action. The action is the direction of the key press, either down or up. For a given (key, action) combination only a single procedure can be configured. If you configure another procedure for the same (key, action) combination it replaces the previous one. To deconfigure a procedure, use the empty string as the procedure name.","title":"KeyActionProcedure"},{"location":"exp/openapi/#rendertext-and-renderpixelgraphic","text":"The OpenAPI allows the Outside Apps to display text and PNG on the AX Visio.","title":"RenderText and RenderPixelGraphic"},{"location":"exp/openapi/#rendertext","text":"The outside app can draw one lined text strings on the AX Visio with the RenderText topic. The position on the screen is specified in a normal x,y coordinate system. To calculate the middle of the screen or the bottom half of the screen, you have to first query the screen resolution using the GetDisplayResolution topic. The outside app can draw up to five different text strings at the same time on the AX Visio. If the outside app sends more than five text strings to the AX Visio, the oldest text is removed. It's a first-in-first-out queue.","title":"RenderText"},{"location":"exp/openapi/#renderpixelgraphic","text":"The Outside App can also draw arbitrary graphics on the AX Visio using the RenderPixelGraphic topic. There are two graphics slot in the AX Visio. One slot for a rotated image and one slot for a non-rotated image. If the Outside App sends a new graphic before the duration of the old graphic is elapsed, the new graphic replaces the old one. The Outside App's image is not scaled. It's drawn at the same size on the AX Visio. The current drawable resolution of the AX Visio display is 1366x768. Furthermore the image is drawn at the center of the AX Visio screen, which is the important visual view area for a user. So the image does not have to be the same resolution as the AX Visio screen. It can be smaller and only cover the area that the Outside App wants to draw in the center of the view. The border of the screen is hard to see and recognizable by the user. The image can be grayscale. It should mostly only use white and transparency. Black is not visible on the display. RGB images work technically, too, but are shown as grayscale on the monochrome AX Visio display.","title":"RenderPixelGraphic"},{"location":"exp/openapi/#mediaclient","text":"Try to avoid using the PictureTopics or the VideoTopics directly. It's recommend to use the MediaClient library. It will handle the download of pictures and vidoes for you. It also writes the files to a shared storage, so multiple different apps can use them.","title":"MediaClient"},{"location":"exp/openapi/#livestreamcontext","text":"The AX Visio can provide a RTSP video stream which can be received by the Outside App, e.g. with the Android MediaPlayer. The Outside App can activate the LiveStreamContext with the OpenAPI StartLiveVideoStreaming topic and stop it with StopLiveVideoStreaming topic. When the Outside App starts to use the LiveStreamContext, the Video stream and RSTP server is started on the AX Visio. After using the context, the Outside app can subscribe to the LiveStreamStatus to receive the details about the video stream. While handling this topic, the Outside App should take care of the following points: Check for the URL value RTSP URL NOT AVAILABLE or non-valid RTSP URLs. The AX Visio sends it when there is no RTSP server running anymore. This topic is also send when a client connects and disconnect. See field activeClients . It changes regularly. So if the Outside App restarts the stream on every topic change, it creates a endless feedback loop, because the field activeClients changes when the client itself connects and disconnects. If you want to change the resolution of the RTSP video stream, you can use the topic SetLiveStreamSettings . The currently only available resolutions are 640x480 1280x720 1920x1080","title":"LiveStreamContext"},{"location":"exp/so-comm-sdk/","text":"SO Comm SDK The SO Comm SDK is a set of APIs, which are grouped into SO Comm Inside API for device development and SO Comm Outside API mainly for smartphone/tablet development. These SDKs allow to reuse WiFi and BLE communication routines for multiple products. By separating the behavior and communication routines from data definitions, into different artifacts we also aim to have stable behavior, but of course flexible data definitions for the different product needs. For the OpenAPI only the SO Comm Outside API is relevant. SOContext Concept Swarovski Optik devices are able to run in different device modes (Inside Apps). For example, the AX Visio can run the Photo/Video or Bird ID App. Depending on the Inside App (and also depending on the state of the Inside App) different communication needs might be present. On the other hand, Swarovski Optik devices support multiple Outside Apps (running on a smartphone or tablet for example). These Outside Apps also have different communication needs. For example, the Merlin App is only interested in receiving photos and being able to configure settings for the Bird-ID Inside App, but it is not interested in receiving a live stream from the SO device or video recordings. Each of the communication features mentioned above (e.g. receiving photos), includes various communication endpoints. Moreover, different communication technologies (in our case WiFi, Bluetooth Low Energy (BLE)), communication protocols (BLE GATT, Wifi MQTT, RTP) and access control requirements are present. Therefore, the SO Comm SDK introduces a new layer for handling communication endpoints: SOContexts A SOContext contains a set of communication endpoints that are from a usage point of view related to each other, have similar needs for communication bandwidth and access control requirements. On Swarovski Optik devices SOContexts can be provided by applications or system services, which might be used by several applications. On smartphones apps can use a SOContext, when it is provided by a Swarovski Optik device and the app has access to it. Access is controlled using an API Key. See below for futher details. Inside and Outside API To support the developers of Inside and Outside Apps two APIs have been developed: The SO Comm Inside API the SO Comm Outside API . For the Swarovski Optics OpenAPI only the later is relevant. An Outside App registers to use one or multiple SOContexts via the SOCommOutsideAPI object Moreover, the SOContext defines whether BLE only is sufficient or also WiFi will be used for transmitting data. BLE is used as initial communication technology for connection establishment and checking SOContext availability and is always available on the Device. If one SOContext, which requires WiFi as communication technology (for bandwidth reasons), is in use (i.e., an Inside App configured it as supported and an Outside App registered to it), all communication with this Outside App will be carried out using WiFi. Nevertheless, the BLE connection will be kept alive on the Device to enable smooth transitions if WiFi is switched off for any reason. Additional clients may connect via WiFi if the corresponding SOContexts are in use by the first client and the client shared the WiFi credentials out-of-band (e.g. via a QR code). Communication Endpoints The following communication endpoints are supported by the SO Communication Inside API and Outside API at the moment: Topics (very similar to MQTT topics) A topic has a unique path which contains its name. A topic is either an \"in\" topic or an \"out\" topic. An \"in\" topic is a topic which will be subscribed by Inside Apps and can be used by Outside Apps to transmit information (publish) to Inside Apps. An \"out\" topic is a topic which will be subscribed by Outside Apps and can be used by Inside Apps to transmit information (publish) to Outside Apps. Topics are used only for small messages (i.e. < 100 kByte) FileTopics A normal Topic is used to transfer information, where a file can be downloaded using SCP. Also this data exchange can happen in both directions. From Inside to Outside App (e.g. pictures, videos) and from Outside to Insdie App (e.g. OTA update package). RTSP An Outside App can receive an RTSP server URL and connect to it for rendering the live video stream for example. SO Comm Outside API Library The SO Communication Outside API encapsulates the complexity of handling connections across multiple communication technologies - Bluetooth Low Energy and WiFi. Outside App development can rely on the SO Communication Outside API without considering protocol details, i.e., an abstract interface is provided. An Outside App uses the SO Communication Outside API to configure its needed SOContexts (use) and it is informed by the API if the current available SOContexts have changed. Operations To connect and disconnect to a AX Visio device, the methods are exposed: fun connect(deviceName: String): Completable fun disconnect(): Completable val connectionState: Observable<SOCommOutsideAPI.ConnectionState> To use, unuse and see the available SOContexts, the following methods and variables exists val availableContexts: Observable<Set<SOContext>> val contextsInUse: Observable<Set<SOContext>> fun use(context: SOContext): Completable fun release(context: SOContext): Completable After using a context, you can publish and subscribe to the topics in the SOContext: fun <T> subscribeTopic(topic: TopicOut<T>): Observable<T> fun <T> publishTopic(topic: TopicIn<T>, value: T): Completable To retrieve and send files the SO Comm Outside API provides the follwing methods and objects, but before using these directly consider using the MediaClient library. SOCommFileApi fun sendFile(topic: FileTopic, file: File): Flowable<Int> fun sendFile(topic: FileTopic, uri: Uri): Flowable<Int> fun subscribeToFiles(topic: FileTopic): Flowable<SOCommFileApi.ReceivedFile> Security Concept - API keys The authentication of SOContext usage is based on API Keys. These are unencrypted JSON Web Token (JWT) , given out by Swarovski Optik to application developers. An API key is tied to a specific set of SOContexts. For the OpenAPI usages the API key will grant accees to the OpenAPI and the other relevant contexts. See OpenAPI > Available Contexts .","title":"SO Comm SDK"},{"location":"exp/so-comm-sdk/#so-comm-sdk","text":"The SO Comm SDK is a set of APIs, which are grouped into SO Comm Inside API for device development and SO Comm Outside API mainly for smartphone/tablet development. These SDKs allow to reuse WiFi and BLE communication routines for multiple products. By separating the behavior and communication routines from data definitions, into different artifacts we also aim to have stable behavior, but of course flexible data definitions for the different product needs. For the OpenAPI only the SO Comm Outside API is relevant.","title":"SO Comm SDK"},{"location":"exp/so-comm-sdk/#socontext-concept","text":"Swarovski Optik devices are able to run in different device modes (Inside Apps). For example, the AX Visio can run the Photo/Video or Bird ID App. Depending on the Inside App (and also depending on the state of the Inside App) different communication needs might be present. On the other hand, Swarovski Optik devices support multiple Outside Apps (running on a smartphone or tablet for example). These Outside Apps also have different communication needs. For example, the Merlin App is only interested in receiving photos and being able to configure settings for the Bird-ID Inside App, but it is not interested in receiving a live stream from the SO device or video recordings. Each of the communication features mentioned above (e.g. receiving photos), includes various communication endpoints. Moreover, different communication technologies (in our case WiFi, Bluetooth Low Energy (BLE)), communication protocols (BLE GATT, Wifi MQTT, RTP) and access control requirements are present. Therefore, the SO Comm SDK introduces a new layer for handling communication endpoints: SOContexts A SOContext contains a set of communication endpoints that are from a usage point of view related to each other, have similar needs for communication bandwidth and access control requirements. On Swarovski Optik devices SOContexts can be provided by applications or system services, which might be used by several applications. On smartphones apps can use a SOContext, when it is provided by a Swarovski Optik device and the app has access to it. Access is controlled using an API Key. See below for futher details.","title":"SOContext Concept"},{"location":"exp/so-comm-sdk/#inside-and-outside-api","text":"To support the developers of Inside and Outside Apps two APIs have been developed: The SO Comm Inside API the SO Comm Outside API . For the Swarovski Optics OpenAPI only the later is relevant. An Outside App registers to use one or multiple SOContexts via the SOCommOutsideAPI object Moreover, the SOContext defines whether BLE only is sufficient or also WiFi will be used for transmitting data. BLE is used as initial communication technology for connection establishment and checking SOContext availability and is always available on the Device. If one SOContext, which requires WiFi as communication technology (for bandwidth reasons), is in use (i.e., an Inside App configured it as supported and an Outside App registered to it), all communication with this Outside App will be carried out using WiFi. Nevertheless, the BLE connection will be kept alive on the Device to enable smooth transitions if WiFi is switched off for any reason. Additional clients may connect via WiFi if the corresponding SOContexts are in use by the first client and the client shared the WiFi credentials out-of-band (e.g. via a QR code).","title":"Inside and Outside API"},{"location":"exp/so-comm-sdk/#communication-endpoints","text":"The following communication endpoints are supported by the SO Communication Inside API and Outside API at the moment: Topics (very similar to MQTT topics) A topic has a unique path which contains its name. A topic is either an \"in\" topic or an \"out\" topic. An \"in\" topic is a topic which will be subscribed by Inside Apps and can be used by Outside Apps to transmit information (publish) to Inside Apps. An \"out\" topic is a topic which will be subscribed by Outside Apps and can be used by Inside Apps to transmit information (publish) to Outside Apps. Topics are used only for small messages (i.e. < 100 kByte) FileTopics A normal Topic is used to transfer information, where a file can be downloaded using SCP. Also this data exchange can happen in both directions. From Inside to Outside App (e.g. pictures, videos) and from Outside to Insdie App (e.g. OTA update package). RTSP An Outside App can receive an RTSP server URL and connect to it for rendering the live video stream for example.","title":"Communication Endpoints"},{"location":"exp/so-comm-sdk/#so-comm-outside-api-library","text":"The SO Communication Outside API encapsulates the complexity of handling connections across multiple communication technologies - Bluetooth Low Energy and WiFi. Outside App development can rely on the SO Communication Outside API without considering protocol details, i.e., an abstract interface is provided. An Outside App uses the SO Communication Outside API to configure its needed SOContexts (use) and it is informed by the API if the current available SOContexts have changed.","title":"SO Comm Outside API Library"},{"location":"exp/so-comm-sdk/#operations","text":"To connect and disconnect to a AX Visio device, the methods are exposed: fun connect(deviceName: String): Completable fun disconnect(): Completable val connectionState: Observable<SOCommOutsideAPI.ConnectionState> To use, unuse and see the available SOContexts, the following methods and variables exists val availableContexts: Observable<Set<SOContext>> val contextsInUse: Observable<Set<SOContext>> fun use(context: SOContext): Completable fun release(context: SOContext): Completable After using a context, you can publish and subscribe to the topics in the SOContext: fun <T> subscribeTopic(topic: TopicOut<T>): Observable<T> fun <T> publishTopic(topic: TopicIn<T>, value: T): Completable To retrieve and send files the SO Comm Outside API provides the follwing methods and objects, but before using these directly consider using the MediaClient library. SOCommFileApi fun sendFile(topic: FileTopic, file: File): Flowable<Int> fun sendFile(topic: FileTopic, uri: Uri): Flowable<Int> fun subscribeToFiles(topic: FileTopic): Flowable<SOCommFileApi.ReceivedFile>","title":"Operations"},{"location":"exp/so-comm-sdk/#security-concept-api-keys","text":"The authentication of SOContext usage is based on API Keys. These are unencrypted JSON Web Token (JWT) , given out by Swarovski Optik to application developers. An API key is tied to a specific set of SOContexts. For the OpenAPI usages the API key will grant accees to the OpenAPI and the other relevant contexts. See OpenAPI > Available Contexts .","title":"Security Concept - API keys"},{"location":"how/adding-the-so-comm-sdk-libraries/","text":"Adding the SO Comm SDK libraries your application This guide explains how to add the SO Comm Outside API Library and the SO Comm MediaClient to your Android application. Adding the Swarovski Optic Maven repo You need to configure a new repository to fetch the SDK libraries. For the Groovy DSL this can be done in your root project's settings.gradle file. Add the following lines to include the Swarovski Optik maven repository for all your modules: dependencyResolutionManagement { [...] repositories { [...] maven { url \"https://repo.swarovskioptik.com/repository/maven-swarovski-optik/\" } } } For the newer Kotlin DSL you must add the following to the settings.gradle.kts : dependencyResolutionManagement { [...] repositories { [...] maven(url = uri(\"https://repo.swarovskioptik.com/repository/maven-swarovski-optik/\")) } } Adding the SO Comm Outside API After the repository has been added, you can add the dependency like any other gradle/maven dependency in your module/app level build.gradle file: dependencies { implementation \"com.swarovskioptik.comm:SOCommOutsideAPI:[CURRENT_LIBRARY_VERSION]\" [...] } Replace the term [CURRENT_LIBRARY_VERSION] with the current library version. See for Releases of the SO Comm SDK for details. If your project uses the Kotlin DSL, use the following snippets for the module/app level build.gradle.kts : dependencies { implementation(\"com.swarovskioptik.comm:SOCommOutsideAPI:[CURRENT_LIBRARY_VERSION]\") [...] } Adding the SO Comm MediaClient The SO Comm MediaClient is a library to download videos and pictures from the AX Visio the smartphone. E.g. you can use it to download a photo that a user has taken while the OpenAPI was used. Adding the MediaClient to your Android application is straight forward. For the Groovy DSL add the follwing line in the module/app level build.gradle file: dependencies { implementation \"com.swarovskioptik.comm:SOCommMediaClient:[CURRENT_LIBRARY_VERSION]\" [...] } For the Kotlin DSL add the following line in the module/app level build.gradle.kts file: dependencies { implementation(\"com.swarovskioptik.comm:SOCommMediaClient:[CURRENT_LIBRARY_VERSION]\") [...] }","title":"Adding the SO Comm SDK libraries your application"},{"location":"how/adding-the-so-comm-sdk-libraries/#adding-the-so-comm-sdk-libraries-your-application","text":"This guide explains how to add the SO Comm Outside API Library and the SO Comm MediaClient to your Android application.","title":"Adding the SO Comm SDK libraries your application"},{"location":"how/adding-the-so-comm-sdk-libraries/#adding-the-swarovski-optic-maven-repo","text":"You need to configure a new repository to fetch the SDK libraries. For the Groovy DSL this can be done in your root project's settings.gradle file. Add the following lines to include the Swarovski Optik maven repository for all your modules: dependencyResolutionManagement { [...] repositories { [...] maven { url \"https://repo.swarovskioptik.com/repository/maven-swarovski-optik/\" } } } For the newer Kotlin DSL you must add the following to the settings.gradle.kts : dependencyResolutionManagement { [...] repositories { [...] maven(url = uri(\"https://repo.swarovskioptik.com/repository/maven-swarovski-optik/\")) } }","title":"Adding the Swarovski Optic Maven repo"},{"location":"how/adding-the-so-comm-sdk-libraries/#adding-the-so-comm-outside-api","text":"After the repository has been added, you can add the dependency like any other gradle/maven dependency in your module/app level build.gradle file: dependencies { implementation \"com.swarovskioptik.comm:SOCommOutsideAPI:[CURRENT_LIBRARY_VERSION]\" [...] } Replace the term [CURRENT_LIBRARY_VERSION] with the current library version. See for Releases of the SO Comm SDK for details. If your project uses the Kotlin DSL, use the following snippets for the module/app level build.gradle.kts : dependencies { implementation(\"com.swarovskioptik.comm:SOCommOutsideAPI:[CURRENT_LIBRARY_VERSION]\") [...] }","title":"Adding the SO Comm Outside API"},{"location":"how/adding-the-so-comm-sdk-libraries/#adding-the-so-comm-mediaclient","text":"The SO Comm MediaClient is a library to download videos and pictures from the AX Visio the smartphone. E.g. you can use it to download a photo that a user has taken while the OpenAPI was used. Adding the MediaClient to your Android application is straight forward. For the Groovy DSL add the follwing line in the module/app level build.gradle file: dependencies { implementation \"com.swarovskioptik.comm:SOCommMediaClient:[CURRENT_LIBRARY_VERSION]\" [...] } For the Kotlin DSL add the following line in the module/app level build.gradle.kts file: dependencies { implementation(\"com.swarovskioptik.comm:SOCommMediaClient:[CURRENT_LIBRARY_VERSION]\") [...] }","title":"Adding the SO Comm MediaClient"},{"location":"how/using-kotlin-extensions/","text":"Using Kotlin extensions The SDK is based on RxJava 2. If your app is based on Kotlin Coroutines / Flow, wrapper for APIs that provide the functionality using suspending functions and Flows are available as: FlowSOCommOutsideAPIWrapper for SOCommOutsideAPI FlowSOCommMediaClientWrapper for SOCommMediaClient In each case, build the SDK as stated above with the respective builder, and use the extension function .asFlowApi() that will return a respective coroutine / flow instance. You can add these libraries to your build.gradle like dependencies { implementation \"com.swarovskioptik.comm::FlowSOCommMediaClientWrapper:[CURRENT_LIBRARY_VERSION]\" implementation \"com.swarovskioptik.comm::FlowSOCommOutsideAPIWrapper:[CURRENT_LIBRARY_VERSION]\" [...] } Replace the term [CURRENT_LIBRARY_VERSION] with the current library version. See for Releases of the SOComm SDK for details.","title":"Using Kotlin extensions"},{"location":"how/using-kotlin-extensions/#using-kotlin-extensions","text":"The SDK is based on RxJava 2. If your app is based on Kotlin Coroutines / Flow, wrapper for APIs that provide the functionality using suspending functions and Flows are available as: FlowSOCommOutsideAPIWrapper for SOCommOutsideAPI FlowSOCommMediaClientWrapper for SOCommMediaClient In each case, build the SDK as stated above with the respective builder, and use the extension function .asFlowApi() that will return a respective coroutine / flow instance. You can add these libraries to your build.gradle like dependencies { implementation \"com.swarovskioptik.comm::FlowSOCommMediaClientWrapper:[CURRENT_LIBRARY_VERSION]\" implementation \"com.swarovskioptik.comm::FlowSOCommOutsideAPIWrapper:[CURRENT_LIBRARY_VERSION]\" [...] } Replace the term [CURRENT_LIBRARY_VERSION] with the current library version. See for Releases of the SOComm SDK for details.","title":"Using Kotlin extensions"},{"location":"how/using-the-so-comm-outside-api/","text":"Using the SO Comm Outside API The SOCommOutsideAPI can be instantiated by using the provided SOCommOutsideAPIBuilder class: Using the SOCommOutsideAPIBuilder val api = SOCommOutsideAPIBuilder(this) .apiKey(\"[YOUR_API_KEY]\") .build() For this example the this points to an Android Activity , which is an Android Context . You have to replace the [YOUR_API_KEY] with your own personal API key. The API key can be requested from Swarovski Optik. See Requesting an API key for details. The API key is needed to authentice your applications against the device. Logging You can configure debug, warning and error logs, too. For example you could log error logs in production to e.g. Crashlytics, and warning logs in debug builds to the logcat. The debug-logs are quite verbose and we recommend to only enable them if you are experiencing any troubles. In practice it has been best to filter the debug logs in debug builds to only include the ones tagged with SDK : val api = SOCommOutsideAPIBuilder(this) .apiKey(\"[YOUR_API_KEY]\") .debugLogs { tag, message -> if (BuildConfig.DEBUG) { Log.d(tag, message) } } .warningLogs { tag, message -> if (BuildConfig.DEBUG) { Log.w(tag, message) } } .errorLogs { tag, message -> Log.e(tag, message) } .build() Basic Usage The API interface is developed using RxJava2 , so the API is written for full RxJava2 support. If you're not familiar with Completable s and Observable s, please refer to the RxJava documentation first. What is here described as \"calling a method\" implies that the method is called, and the returned Completable or Observable is subscribed to. Please also be aware of disposing your subscriptions accordingly. The following sections should give a broad overview of the functionality of the API. For details on specific calls, please refer to their JavaDocs. Search for a device If you don't know the name of the device and want to search for nearby devices, the SDK provides a SOCommDeviceSearcher interface that can be used to get a live list of devices found nearby: // Create an instance using the create method val deviceSearcher = SOCommDeviceSearcher.create(this) // Subscribing to the returned Observable will start the search and will emit a list of all found devices with live updates: val disposable = deviceSearcher.search() .subscribe( { foundDevices -> Log.d(\"DeviceSearcher\", \"List has been updated:\") foundDevices.forEach { foundDevice -> Log.d(\"DeviceSearcher\", \"Found device $foundDevice\") } }, { e -> Log.e(\"DeviceSearcher\", \"Error: ${e.message}\", e) } ) // Dispose when the search should be stopped: disposable.dispose() Android Permissions The library needs some install and runtime permissions to operate. These are already declared in the AndroidManifest.xml of the SO Comm Outside API library, so you don't have to declare these in our application's manifest yourself. They are added automatically. The needed permissions are described in the connect() method. Requesting the runtime permissions is not done by the SO Comm Outside API library. These are Manifest.permission.ACCESS_FINE_LOCATION Manifest.permission.BLUETOOTH_SCAN Manifest.permission.BLUETOOTH_CONNECT Manifest.permission.BLUETOOTH_ADVERTISE Your application has to request them itself. See the example applications for details. Bluetooth Additionally the user has to enable bluetooth. Checking whether Bluetooth is enabled, can be done with Android's BluetoothManager . For an example please have a look at the the example applications , too. Establish a connection Basically you can connect to a remote device using the connect() method with the device name you want to connect to. Once the operation completes, the connection has been established. Please refer to the JavaDocs of the connect method for a detailed description as well as possible error cases. You can disconnect anytime by calling the disconnect() method. val compositeDisposable = CompositeDisposable() api.connect(\"DeviceName\") .subscribe( { Log.d(\"API\", \"Successfully connected to the remote device\") // now you are connected. You can use/release contexts now, and publish/subscribe topics. // ... }, { e -> Log.e(\"API\", \"Error while connecting to remote device\", e) } ) .addTo(compositeDisposable) //If you want to exit the application / want to disconnect gracefully: api.disconnect() .subscribe( { Log.d(\"API\", \"Successfully disconnected from the remote device\") }, { e -> Log.e(\"API\", \"Error while disconnecting from the remote device\", e) } ) .addTo(compositeDisposable) The connectionState will emit a new item any time the connection state changes, so you can subscribe to that to be informed of any connection state changes. (In more detail, the implementation of the connectionState Observable is done using BehaviorRelay s, which means that when subscribing to it, the current state is emitted nearly instantly for each subscriber. So it is safe and legit to use that with the blockingFirst or firstOrError operators.) The permissions need to be granted before calling connect() or otherwise the connect() method will error with a PermissionNotGrantedException . See the previous sections. Use & Release contexts The topics you want to publish/subscribe to are grouped in different contexts (the class is named SO Context easily distinguishable with the Android Context). A context defines a set of topics which can either be subscribed or published to. Furthermore, a context defines which type of connection the topics within that topic require. Therefore, to be able to publish or subscribe to topics, you need to use the respective context first. To use a context, call the use() method. This method returns a Completable which completes once the initialization of the SO Context has been done. // after `api.connect()` has completed api.use(SomePredefinedContext) .subscribe( { // This signals, that the context has been successfully initialized. // now you can publish / subscribe topics of the context. // The subscription emitted by use here also emits all items which are emitted // on any topic of the given context. Log.d(\"API\", \"context 'SomePredefinedContext' is now in use\") }, { e -> Log.e(\"API\", \"Error while using the context\", e) } ) .addTo(compositeDisposable) If you don't need a context anymore (in other words: don't need the context's topics subscriptions anymore), you should release a context again. You should not hold context in use if you don't need them. To release a context, call the release() method with the context which should be released. // after `api.connect()` has completed and a context has been used (`api.use()`) which contains the given topic api.release(TestTopics.SomeTopic) .subscribe( { Log.d(\"API\", \"Successfully released the given context\") }, { e -> Log.e(\"API\", \"Error while releasing\", e) } ) .addTo(compositeDisposable) On a more detailed note: The purpose of contexts is at one hand to protect certain functionalities / topics with the given API-key, but on the other hand also to distinguish over which connection type (BLE or WIFI) the given topics can / should be transmitted. Therefore, using a context which has the connection-type WIFI declared will result in a wifi connection attempt, and releasing such a context may result in a wifi disconnect event. As WIFI usage may introduce a lower battery life expectancy of the remote device, such contexts should only be used if needed, and be released when no longer needed. Publish & Subscribe The actual communication is implemented using a publish-subscribe messaging pattern (somewhat similar to what MQTT implements). So to send messages, you need to publish them on a given Topic , and to receive messages of a given type, you need to subscribe a given Topic . Topics are (predefined) classes (objects) that implement the TopicIn or TopicOut interface, depending on whether they are topics to be subscribed or topics to be published. Each topic can either be a topic that can be published from the outside, or can be subscribed from the outside, but not both. To publish values on a topic (send them to the remote device), call the publishTopic() method. Pass the TopicIn to send the value on as well as the value to be sent here. The type of the data to be emitted is defined by the given TopicIn . Each TopicIn has its own serializer, which will serialize the given value and send it to the remote device. The returned completable will complete once the value has been sent (this is not in sync to when the value will be received on the other end). // after `api.connect()` has completed and a context has been used (`api.use()` has completed) which contains the given topic. api.publishTopic(Topics.SomeTopic, \"Some value\") .subscribe( { Log.d(\"API\", \"Successfully published to the remote device\") }, { e -> Log.e(\"API\", \"Error while publishing\", e) } ) .addTo(compositeDisposable) To subscribe to a topic (receive values from the remote device), call the subscribeTopic() method. The returned observable will emit all items received from the remote device de-serialized to the original type again. The type of item which is emitted by the subscription is defined by the given TopicOut . Note that in order to be able to publish or subscribe to a topic, at least one context must be in use which includes the given topic. Otherwise, the methods will emit an error. // after `api.connect()` has completed and a context has been used (`api.use()`) which contains the // given topic (and its `Initialized` item has been emitted) api.subscribeTopic(Topics.SomeTopic) .subscribe( { item -> Log.d(\"API\", \"SomeTopic emitted an item: $item\") }, { e -> Log.e(\"API\", \"Error during subscription\", e) } ) .addTo(compositeDisposable)","title":"Using the SO Comm Outside API"},{"location":"how/using-the-so-comm-outside-api/#using-the-so-comm-outside-api","text":"The SOCommOutsideAPI can be instantiated by using the provided SOCommOutsideAPIBuilder class:","title":"Using the SO Comm Outside API"},{"location":"how/using-the-so-comm-outside-api/#using-the-socommoutsideapibuilder","text":"val api = SOCommOutsideAPIBuilder(this) .apiKey(\"[YOUR_API_KEY]\") .build() For this example the this points to an Android Activity , which is an Android Context . You have to replace the [YOUR_API_KEY] with your own personal API key. The API key can be requested from Swarovski Optik. See Requesting an API key for details. The API key is needed to authentice your applications against the device.","title":"Using the SOCommOutsideAPIBuilder"},{"location":"how/using-the-so-comm-outside-api/#logging","text":"You can configure debug, warning and error logs, too. For example you could log error logs in production to e.g. Crashlytics, and warning logs in debug builds to the logcat. The debug-logs are quite verbose and we recommend to only enable them if you are experiencing any troubles. In practice it has been best to filter the debug logs in debug builds to only include the ones tagged with SDK : val api = SOCommOutsideAPIBuilder(this) .apiKey(\"[YOUR_API_KEY]\") .debugLogs { tag, message -> if (BuildConfig.DEBUG) { Log.d(tag, message) } } .warningLogs { tag, message -> if (BuildConfig.DEBUG) { Log.w(tag, message) } } .errorLogs { tag, message -> Log.e(tag, message) } .build()","title":"Logging"},{"location":"how/using-the-so-comm-outside-api/#basic-usage","text":"The API interface is developed using RxJava2 , so the API is written for full RxJava2 support. If you're not familiar with Completable s and Observable s, please refer to the RxJava documentation first. What is here described as \"calling a method\" implies that the method is called, and the returned Completable or Observable is subscribed to. Please also be aware of disposing your subscriptions accordingly. The following sections should give a broad overview of the functionality of the API. For details on specific calls, please refer to their JavaDocs.","title":"Basic Usage"},{"location":"how/using-the-so-comm-outside-api/#search-for-a-device","text":"If you don't know the name of the device and want to search for nearby devices, the SDK provides a SOCommDeviceSearcher interface that can be used to get a live list of devices found nearby: // Create an instance using the create method val deviceSearcher = SOCommDeviceSearcher.create(this) // Subscribing to the returned Observable will start the search and will emit a list of all found devices with live updates: val disposable = deviceSearcher.search() .subscribe( { foundDevices -> Log.d(\"DeviceSearcher\", \"List has been updated:\") foundDevices.forEach { foundDevice -> Log.d(\"DeviceSearcher\", \"Found device $foundDevice\") } }, { e -> Log.e(\"DeviceSearcher\", \"Error: ${e.message}\", e) } ) // Dispose when the search should be stopped: disposable.dispose()","title":"Search for a device"},{"location":"how/using-the-so-comm-outside-api/#android-permissions","text":"The library needs some install and runtime permissions to operate. These are already declared in the AndroidManifest.xml of the SO Comm Outside API library, so you don't have to declare these in our application's manifest yourself. They are added automatically. The needed permissions are described in the connect() method. Requesting the runtime permissions is not done by the SO Comm Outside API library. These are Manifest.permission.ACCESS_FINE_LOCATION Manifest.permission.BLUETOOTH_SCAN Manifest.permission.BLUETOOTH_CONNECT Manifest.permission.BLUETOOTH_ADVERTISE Your application has to request them itself. See the example applications for details.","title":"Android Permissions"},{"location":"how/using-the-so-comm-outside-api/#bluetooth","text":"Additionally the user has to enable bluetooth. Checking whether Bluetooth is enabled, can be done with Android's BluetoothManager . For an example please have a look at the the example applications , too.","title":"Bluetooth"},{"location":"how/using-the-so-comm-outside-api/#establish-a-connection","text":"Basically you can connect to a remote device using the connect() method with the device name you want to connect to. Once the operation completes, the connection has been established. Please refer to the JavaDocs of the connect method for a detailed description as well as possible error cases. You can disconnect anytime by calling the disconnect() method. val compositeDisposable = CompositeDisposable() api.connect(\"DeviceName\") .subscribe( { Log.d(\"API\", \"Successfully connected to the remote device\") // now you are connected. You can use/release contexts now, and publish/subscribe topics. // ... }, { e -> Log.e(\"API\", \"Error while connecting to remote device\", e) } ) .addTo(compositeDisposable) //If you want to exit the application / want to disconnect gracefully: api.disconnect() .subscribe( { Log.d(\"API\", \"Successfully disconnected from the remote device\") }, { e -> Log.e(\"API\", \"Error while disconnecting from the remote device\", e) } ) .addTo(compositeDisposable) The connectionState will emit a new item any time the connection state changes, so you can subscribe to that to be informed of any connection state changes. (In more detail, the implementation of the connectionState Observable is done using BehaviorRelay s, which means that when subscribing to it, the current state is emitted nearly instantly for each subscriber. So it is safe and legit to use that with the blockingFirst or firstOrError operators.) The permissions need to be granted before calling connect() or otherwise the connect() method will error with a PermissionNotGrantedException . See the previous sections.","title":"Establish a connection"},{"location":"how/using-the-so-comm-outside-api/#use-release-contexts","text":"The topics you want to publish/subscribe to are grouped in different contexts (the class is named SO Context easily distinguishable with the Android Context). A context defines a set of topics which can either be subscribed or published to. Furthermore, a context defines which type of connection the topics within that topic require. Therefore, to be able to publish or subscribe to topics, you need to use the respective context first. To use a context, call the use() method. This method returns a Completable which completes once the initialization of the SO Context has been done. // after `api.connect()` has completed api.use(SomePredefinedContext) .subscribe( { // This signals, that the context has been successfully initialized. // now you can publish / subscribe topics of the context. // The subscription emitted by use here also emits all items which are emitted // on any topic of the given context. Log.d(\"API\", \"context 'SomePredefinedContext' is now in use\") }, { e -> Log.e(\"API\", \"Error while using the context\", e) } ) .addTo(compositeDisposable) If you don't need a context anymore (in other words: don't need the context's topics subscriptions anymore), you should release a context again. You should not hold context in use if you don't need them. To release a context, call the release() method with the context which should be released. // after `api.connect()` has completed and a context has been used (`api.use()`) which contains the given topic api.release(TestTopics.SomeTopic) .subscribe( { Log.d(\"API\", \"Successfully released the given context\") }, { e -> Log.e(\"API\", \"Error while releasing\", e) } ) .addTo(compositeDisposable) On a more detailed note: The purpose of contexts is at one hand to protect certain functionalities / topics with the given API-key, but on the other hand also to distinguish over which connection type (BLE or WIFI) the given topics can / should be transmitted. Therefore, using a context which has the connection-type WIFI declared will result in a wifi connection attempt, and releasing such a context may result in a wifi disconnect event. As WIFI usage may introduce a lower battery life expectancy of the remote device, such contexts should only be used if needed, and be released when no longer needed.","title":"Use &amp; Release contexts"},{"location":"how/using-the-so-comm-outside-api/#publish-subscribe","text":"The actual communication is implemented using a publish-subscribe messaging pattern (somewhat similar to what MQTT implements). So to send messages, you need to publish them on a given Topic , and to receive messages of a given type, you need to subscribe a given Topic . Topics are (predefined) classes (objects) that implement the TopicIn or TopicOut interface, depending on whether they are topics to be subscribed or topics to be published. Each topic can either be a topic that can be published from the outside, or can be subscribed from the outside, but not both. To publish values on a topic (send them to the remote device), call the publishTopic() method. Pass the TopicIn to send the value on as well as the value to be sent here. The type of the data to be emitted is defined by the given TopicIn . Each TopicIn has its own serializer, which will serialize the given value and send it to the remote device. The returned completable will complete once the value has been sent (this is not in sync to when the value will be received on the other end). // after `api.connect()` has completed and a context has been used (`api.use()` has completed) which contains the given topic. api.publishTopic(Topics.SomeTopic, \"Some value\") .subscribe( { Log.d(\"API\", \"Successfully published to the remote device\") }, { e -> Log.e(\"API\", \"Error while publishing\", e) } ) .addTo(compositeDisposable) To subscribe to a topic (receive values from the remote device), call the subscribeTopic() method. The returned observable will emit all items received from the remote device de-serialized to the original type again. The type of item which is emitted by the subscription is defined by the given TopicOut . Note that in order to be able to publish or subscribe to a topic, at least one context must be in use which includes the given topic. Otherwise, the methods will emit an error. // after `api.connect()` has completed and a context has been used (`api.use()`) which contains the // given topic (and its `Initialized` item has been emitted) api.subscribeTopic(Topics.SomeTopic) .subscribe( { item -> Log.d(\"API\", \"SomeTopic emitted an item: $item\") }, { e -> Log.e(\"API\", \"Error during subscription\", e) } ) .addTo(compositeDisposable)","title":"Publish &amp; Subscribe"},{"location":"ref/api-reference/","text":"API Reference The Java and Kotlin reference for all libraries is provided here: API Reference .","title":"API Reference"},{"location":"ref/api-reference/#api-reference","text":"The Java and Kotlin reference for all libraries is provided here: API Reference .","title":"API Reference"},{"location":"ref/example-applications/","text":"Example Applications Currently there is only a single example application. OpenAPI Developer Example Application This is a minimal Android Application to show the usage of the OpenAPI to connect to the AX Visio. The application uses only a very small feature of the OpenAPI. This is intentional. The app should only showcase the necessary steps, UI screens and code to guide the user to grant the necessary Android permissions to the app and enable Bluetooth, to connect to the AX Visio using the SOCommOutsideAPI library and to start the OpenAPI Inside Application with the selection wheel Only after these setup steps are completed, the OpenAPI contexts and other contexts can be used. The code is available at Github in the repo openapi-developer-example-app .","title":"Example Applications"},{"location":"ref/example-applications/#example-applications","text":"Currently there is only a single example application.","title":"Example Applications"},{"location":"ref/example-applications/#openapi-developer-example-application","text":"This is a minimal Android Application to show the usage of the OpenAPI to connect to the AX Visio. The application uses only a very small feature of the OpenAPI. This is intentional. The app should only showcase the necessary steps, UI screens and code to guide the user to grant the necessary Android permissions to the app and enable Bluetooth, to connect to the AX Visio using the SOCommOutsideAPI library and to start the OpenAPI Inside Application with the selection wheel Only after these setup steps are completed, the OpenAPI contexts and other contexts can be used. The code is available at Github in the repo openapi-developer-example-app .","title":"OpenAPI Developer Example Application"},{"location":"ref/exif_field_descriptions/","text":"EXIF Field Descriptions This page provides an overview of the EXIF data embedded in each image by the AXVISIO, detailing key metadata such as capture time, location, camera settings, technical specifications, and species identification information. General Information EXIF Tag Format Comment ImageDescription detailed is described below detailed is described below Make \"Swarovski Optik\" Camera Model Name \"AX VISIO 10x32\" File Name AX VISIO_AXV_yyyyMMdd-HHmmSS.fff.jpg/mp4 Orientation e.g. Horizontal (normal) Software e.g. \"com.swarovskioptik.cameraapp\" package name of Inside App Compression The compression type. jpeg/H.264 FileSize e.g. 6 MB file size in Megabyte Date and Time Information EXIF Tag Format Comment Create Date YYYY:MM:DD HH:mm:ss Date&Time based on current timezone! e.g.: \u201c2024:05:27 08:17:48\u201d Date/Time Original YYYY:MM:DD HH:mm:ss e.g.: \u201c2024:05:27 08:17:48\u201d Location Information EXIF Tag Format Comment GPSLatitude e.g. 47 deg 14' 37.37\" N Indicates the latitude. The latitude is expressed as three RATIONAL values. GPSLatitudeRef e.g. North Indicates whether the latitude is north or south latitude. GPSLongitude e.g. 11 deg 17' 30.25\" E Indicates the longitude. The longitude is expressed as three RATIONAL values. GPSLongitudeRef e.g. East Indicates whether the longitude is east or west longitude. GPSAltitude e.g. 835 m Indicates the altitude based on the reference in GPSAltitudeRef. GPSAltitudeRef e.g. Above Sea Level Indicates the altitude used as the reference altitude. GPSImgDirection e.g. 347.96 The direction of the image when it was captured (in degrees). Camera Settings EXIF Tag Format Comment FNumber unsigned rational e.g. 2.2 The actual F-number(F-stop) of lens when the image was taken. ApertureValue unsigned rational The actual aperture value of lens when the image was taken. MaxApertureValue unsigned rational The smallest F of the lens (in APEX units). FocalLength unsigned rational Focal length of lens used to take image. ISO unused - Falke Iso value in tag \"ISO speed\" ISOSpeed unsigned rational ExposureTime e.g. 1/526 sec The exposure time (in seconds). DeviceSettingDescription unsigned rational Elevation (positive value)/depression(negative value). SubjectDistance unsigned rational The approximate distance to the subject (in meters). SubjectArea detailed is described below Indicates the location and area of the main subject in the overall scene. Image Characteristics EXIF Tag Format Comment BitsPerSample unsigned short/long When image format is no compression, this value shows the number of bits per component for each pixel. ImageHeight unsigned short/long Shows size of thumbnail image. ImageWidth unsigned short/long Shows size of thumbnail image. ExifImageHeight unsigned short/long Size of main image. ExifImageWidth unsigned short/long Size of main image. ColorSpace unsigned short The color space of the image. YCbCrPositioning unsigned short 2 (Co-sited) XResolution unsigned rational The horizontal resolution of the image in DPI. YResolution unsigned rational The vertical resolution of the image in DPI. Video Specific Information EXIF Tag Format Comment Duration e.g. 5 sec Duration of the video in seconds Video Frame Rate e.g. 30 fps Frame rate of the Video per second Detailed Format Description for SubjectArea SubjectArea Indicates the location and area of the main subject in the overall scene. The subject location and area are defined by Count values as follows: Count = 2: Indicates the location of the main subject as coordinates. The first value is the X coordinate and the second is the Y coordinate. Count = 3: The area of the main subject is given as a circle. The circular area is expressed as center coordinates and diameter. The first value is the center X coordinate, the second is the center Y coordinate, and the third is the diameter. Count = 4: The area of the main subject is given as a rectangle. The rectangular area is expressed as center coordinates and area dimensions. The first value is the center X coordinate, the second is the center Y coordinate, the third is the width of the area, and the fourth is the height of the area. (current used version)** Note that the coordinate values, width, and height are expressed in relation to the upper left as origin, prior to rotation processing as per the Rotation tag. Detailed Format Description for ImageDescription BirdID: Format: Top1CommonName|species code list (values separated by comma)|classifier confidence list (values separated by comma)| detector confidence list (values separated by comma)|detector boxes (each box upper left coordinates + width and height; x,y,w,h)| CameraShake|AF state|Number of Detector Segments|Number of final segments|Filtered by GPS|majority vote yes/no|did move focus wheel| Examples: Bullfinch|eurbul|0.97128838|0.78138983|2158,1950,617,423|shaking|StartFocus|detSegments:0|finalSegments:1|filteredByGPS| |||0.0|2450,1890,1500,1500|notShaking|StartFocus|detSegments:0|finalSegments:0|notFilteredByGPS| Falcon|perfal|0.23521970|0.31085718|1893,1981,418,616|notShaking|FocusLocked|detSegments:1|finalSegments:0|filteredByGPS| European+Robin|eurrob1,rebfly,japrob2,carcha1,chcgna1|0.96630859,0.00116730,0.00112247,0.00054932,0.00029635|0.9461405| 2436,1696,390,391|notShaking|StartFocus|detSegments:0|finalSegments:1|notFilteredByGPS|withoutMajorityVote|focusWheelNotMoved| European+Robin|eurrob1,japrob2,carcha1,rebfly,chcgna1|0.95556641,0.00307655,0.00095320,0.00088835,0.00057364|0.9274099| 2395,1608,465,422|notShaking|FocusFailed|detSegments:0|finalSegments:1|notFilteredByGPS|withoutMajorityVote|focusWheelMoved| Wildlife ID: Format: Top1CommonName|species list (values separated by comma)|confidence list (values separated by comma) Top1CommonName in the language used to show on the display (eng, german, latin) specie in species list always in the same language (latin or english) Example: Cervus nippon|Cervus nippon,Dama dama,Cervus elaphus,Axis axis,Odocoileus virginianus|0.91542685,0.058428057,0.020147795,0.0040012943,0.0019829927","title":"EXIF Field Descriptions"},{"location":"ref/exif_field_descriptions/#exif-field-descriptions","text":"This page provides an overview of the EXIF data embedded in each image by the AXVISIO, detailing key metadata such as capture time, location, camera settings, technical specifications, and species identification information.","title":"EXIF Field Descriptions"},{"location":"ref/exif_field_descriptions/#general-information","text":"EXIF Tag Format Comment ImageDescription detailed is described below detailed is described below Make \"Swarovski Optik\" Camera Model Name \"AX VISIO 10x32\" File Name AX VISIO_AXV_yyyyMMdd-HHmmSS.fff.jpg/mp4 Orientation e.g. Horizontal (normal) Software e.g. \"com.swarovskioptik.cameraapp\" package name of Inside App Compression The compression type. jpeg/H.264 FileSize e.g. 6 MB file size in Megabyte","title":"General Information"},{"location":"ref/exif_field_descriptions/#date-and-time-information","text":"EXIF Tag Format Comment Create Date YYYY:MM:DD HH:mm:ss Date&Time based on current timezone! e.g.: \u201c2024:05:27 08:17:48\u201d Date/Time Original YYYY:MM:DD HH:mm:ss e.g.: \u201c2024:05:27 08:17:48\u201d","title":"Date and Time Information"},{"location":"ref/exif_field_descriptions/#location-information","text":"EXIF Tag Format Comment GPSLatitude e.g. 47 deg 14' 37.37\" N Indicates the latitude. The latitude is expressed as three RATIONAL values. GPSLatitudeRef e.g. North Indicates whether the latitude is north or south latitude. GPSLongitude e.g. 11 deg 17' 30.25\" E Indicates the longitude. The longitude is expressed as three RATIONAL values. GPSLongitudeRef e.g. East Indicates whether the longitude is east or west longitude. GPSAltitude e.g. 835 m Indicates the altitude based on the reference in GPSAltitudeRef. GPSAltitudeRef e.g. Above Sea Level Indicates the altitude used as the reference altitude. GPSImgDirection e.g. 347.96 The direction of the image when it was captured (in degrees).","title":"Location Information"},{"location":"ref/exif_field_descriptions/#camera-settings","text":"EXIF Tag Format Comment FNumber unsigned rational e.g. 2.2 The actual F-number(F-stop) of lens when the image was taken. ApertureValue unsigned rational The actual aperture value of lens when the image was taken. MaxApertureValue unsigned rational The smallest F of the lens (in APEX units). FocalLength unsigned rational Focal length of lens used to take image. ISO unused - Falke Iso value in tag \"ISO speed\" ISOSpeed unsigned rational ExposureTime e.g. 1/526 sec The exposure time (in seconds). DeviceSettingDescription unsigned rational Elevation (positive value)/depression(negative value). SubjectDistance unsigned rational The approximate distance to the subject (in meters). SubjectArea detailed is described below Indicates the location and area of the main subject in the overall scene.","title":"Camera Settings"},{"location":"ref/exif_field_descriptions/#image-characteristics","text":"EXIF Tag Format Comment BitsPerSample unsigned short/long When image format is no compression, this value shows the number of bits per component for each pixel. ImageHeight unsigned short/long Shows size of thumbnail image. ImageWidth unsigned short/long Shows size of thumbnail image. ExifImageHeight unsigned short/long Size of main image. ExifImageWidth unsigned short/long Size of main image. ColorSpace unsigned short The color space of the image. YCbCrPositioning unsigned short 2 (Co-sited) XResolution unsigned rational The horizontal resolution of the image in DPI. YResolution unsigned rational The vertical resolution of the image in DPI.","title":"Image Characteristics"},{"location":"ref/exif_field_descriptions/#video-specific-information","text":"EXIF Tag Format Comment Duration e.g. 5 sec Duration of the video in seconds Video Frame Rate e.g. 30 fps Frame rate of the Video per second","title":"Video Specific Information"},{"location":"ref/exif_field_descriptions/#detailed-format-description-for-subjectarea","text":"","title":"Detailed Format Description for SubjectArea"},{"location":"ref/exif_field_descriptions/#subjectarea","text":"Indicates the location and area of the main subject in the overall scene. The subject location and area are defined by Count values as follows: Count = 2: Indicates the location of the main subject as coordinates. The first value is the X coordinate and the second is the Y coordinate. Count = 3: The area of the main subject is given as a circle. The circular area is expressed as center coordinates and diameter. The first value is the center X coordinate, the second is the center Y coordinate, and the third is the diameter. Count = 4: The area of the main subject is given as a rectangle. The rectangular area is expressed as center coordinates and area dimensions. The first value is the center X coordinate, the second is the center Y coordinate, the third is the width of the area, and the fourth is the height of the area. (current used version)** Note that the coordinate values, width, and height are expressed in relation to the upper left as origin, prior to rotation processing as per the Rotation tag.","title":"SubjectArea"},{"location":"ref/exif_field_descriptions/#detailed-format-description-for-imagedescription","text":"BirdID: Format: Top1CommonName|species code list (values separated by comma)|classifier confidence list (values separated by comma)| detector confidence list (values separated by comma)|detector boxes (each box upper left coordinates + width and height; x,y,w,h)| CameraShake|AF state|Number of Detector Segments|Number of final segments|Filtered by GPS|majority vote yes/no|did move focus wheel| Examples: Bullfinch|eurbul|0.97128838|0.78138983|2158,1950,617,423|shaking|StartFocus|detSegments:0|finalSegments:1|filteredByGPS| |||0.0|2450,1890,1500,1500|notShaking|StartFocus|detSegments:0|finalSegments:0|notFilteredByGPS| Falcon|perfal|0.23521970|0.31085718|1893,1981,418,616|notShaking|FocusLocked|detSegments:1|finalSegments:0|filteredByGPS| European+Robin|eurrob1,rebfly,japrob2,carcha1,chcgna1|0.96630859,0.00116730,0.00112247,0.00054932,0.00029635|0.9461405| 2436,1696,390,391|notShaking|StartFocus|detSegments:0|finalSegments:1|notFilteredByGPS|withoutMajorityVote|focusWheelNotMoved| European+Robin|eurrob1,japrob2,carcha1,rebfly,chcgna1|0.95556641,0.00307655,0.00095320,0.00088835,0.00057364|0.9274099| 2395,1608,465,422|notShaking|FocusFailed|detSegments:0|finalSegments:1|notFilteredByGPS|withoutMajorityVote|focusWheelMoved| Wildlife ID: Format: Top1CommonName|species list (values separated by comma)|confidence list (values separated by comma) Top1CommonName in the language used to show on the display (eng, german, latin) specie in species list always in the same language (latin or english) Example: Cervus nippon|Cervus nippon,Dama dama,Cervus elaphus,Axis axis,Odocoileus virginianus|0.91542685,0.058428057,0.020147795,0.0040012943,0.0019829927","title":"Detailed Format Description for ImageDescription"},{"location":"ref/glossary/","text":"Glossary This page is a glossary. It should give a short explanation of all terms used in the context of the OpenAPI for the AX Visio. OpenAPI The term OpenAPI is an umbrella term to sum up all things that are needed to build third party applications that can connect to an AX Visio binocular and use the exposed functionalities. E.g. it describes the OpenAPI Inside Application, the OpenAPI contexts, the topics exposed for the OpenAPI contexts, the OpenAPI documentation, the SO Comm SDK, the SO Comm Outside API Library, ... SO Comm SDK The SO Comm SDK is a set of libraries that can be included in Android applications. These allow to connect to an AX Visio and perform various actions. See SO Comm SDK for details. SO Comm Outside API The SO Comm Outside API is the main Java/Kotlin library to connect to an AX Visio. It handles the connection, usage of SO Contexts and publishing and subscribing to topics. Its API reference can be found here: SOCommOutsideAPI SO Context A SO Context contains a set of communication endpoints that are, from a usage point of view, related to each other, have similar needs for communication bandwidth and access control requirements. On Swarovski Optik devices SO Contexts can be provided by applications or system services, which might be used by several applications. On smartphones applications can use a SO Context, when it is provided by a Swarovski Optik device and the app has access to it. All SO Contexts that are exposed for the OpenAPI are listed here: OpenAPI > Available Contexts Use or release a context Once the application established a connection with the AX Visio, you can use a specific SO Context. This allows your application to use the functionality provided by the context. If your application is finished, you can also release the context again. Topics Topics are unique paths to functionality and very similar to MQTT topics. They are bundled inside a specific SO Context. Topics are characterized as either in or out topics. TopicIns allow you to communicate from the smartphone to the AX Visio. TopicOuts allow to communicate from the AX Visio to the smartphone. Publish or subscribe a topic After connecting with the SO Comm Outside API library to the AX Visio and using a SO Context, you can start using topics. You can publish on a in topic and subscribe to an out topic. OpenAPI Contexts This name stands for the special OpenAPIContext and the OpenAPIContextBLE and the additional contexts that are available for third party applications that are using the OpenAPI. The full list of contexts is available at OpenAPI . Inside vs Outside Applications Inside applications run on the AX Visio binocular and can be activated by rotating the mode selection wheel. Outside Applications run on the users smartphone and connect via the SO Comm SDK to the binocular. SO Comm MediaClient The SO Comm MediaClient , or short MediaClient, is an additional library for picture and video handling around the SO Comm Outside API. It should be used instead of manually downloading picture or video data from the AX Visio.","title":"Glossary"},{"location":"ref/glossary/#glossary","text":"This page is a glossary. It should give a short explanation of all terms used in the context of the OpenAPI for the AX Visio.","title":"Glossary"},{"location":"ref/glossary/#openapi","text":"The term OpenAPI is an umbrella term to sum up all things that are needed to build third party applications that can connect to an AX Visio binocular and use the exposed functionalities. E.g. it describes the OpenAPI Inside Application, the OpenAPI contexts, the topics exposed for the OpenAPI contexts, the OpenAPI documentation, the SO Comm SDK, the SO Comm Outside API Library, ...","title":"OpenAPI"},{"location":"ref/glossary/#so-comm-sdk","text":"The SO Comm SDK is a set of libraries that can be included in Android applications. These allow to connect to an AX Visio and perform various actions. See SO Comm SDK for details.","title":"SO Comm SDK"},{"location":"ref/glossary/#so-comm-outside-api","text":"The SO Comm Outside API is the main Java/Kotlin library to connect to an AX Visio. It handles the connection, usage of SO Contexts and publishing and subscribing to topics. Its API reference can be found here: SOCommOutsideAPI","title":"SO Comm Outside API"},{"location":"ref/glossary/#so-context","text":"A SO Context contains a set of communication endpoints that are, from a usage point of view, related to each other, have similar needs for communication bandwidth and access control requirements. On Swarovski Optik devices SO Contexts can be provided by applications or system services, which might be used by several applications. On smartphones applications can use a SO Context, when it is provided by a Swarovski Optik device and the app has access to it. All SO Contexts that are exposed for the OpenAPI are listed here: OpenAPI > Available Contexts","title":"SO Context"},{"location":"ref/glossary/#use-or-release-a-context","text":"Once the application established a connection with the AX Visio, you can use a specific SO Context. This allows your application to use the functionality provided by the context. If your application is finished, you can also release the context again.","title":"Use or release a context"},{"location":"ref/glossary/#topics","text":"Topics are unique paths to functionality and very similar to MQTT topics. They are bundled inside a specific SO Context. Topics are characterized as either in or out topics. TopicIns allow you to communicate from the smartphone to the AX Visio. TopicOuts allow to communicate from the AX Visio to the smartphone.","title":"Topics"},{"location":"ref/glossary/#publish-or-subscribe-a-topic","text":"After connecting with the SO Comm Outside API library to the AX Visio and using a SO Context, you can start using topics. You can publish on a in topic and subscribe to an out topic.","title":"Publish or subscribe a topic"},{"location":"ref/glossary/#openapi-contexts","text":"This name stands for the special OpenAPIContext and the OpenAPIContextBLE and the additional contexts that are available for third party applications that are using the OpenAPI. The full list of contexts is available at OpenAPI .","title":"OpenAPI Contexts"},{"location":"ref/glossary/#inside-vs-outside-applications","text":"Inside applications run on the AX Visio binocular and can be activated by rotating the mode selection wheel. Outside Applications run on the users smartphone and connect via the SO Comm SDK to the binocular.","title":"Inside vs Outside Applications"},{"location":"ref/glossary/#so-comm-mediaclient","text":"The SO Comm MediaClient , or short MediaClient, is an additional library for picture and video handling around the SO Comm Outside API. It should be used instead of manually downloading picture or video data from the AX Visio.","title":"SO Comm MediaClient"},{"location":"ref/releases/","text":"Releases of the SO Comm SDK The current version of the SO Comm SDK is 1.0.0 . v1.0.0 Diffs and changelog compared to v0.14.0: Remove FFMPEG dependency, close file descriptor for vide thumbnail parsing Include Apache 2.0 license Update dependencies, include ResubscribingReplayingShare as external dependency Version bump to 1.0.0 v0.14.0 First public release. Should not be used anymore!","title":"Releases of the SO Comm SDK"},{"location":"ref/releases/#releases-of-the-so-comm-sdk","text":"The current version of the SO Comm SDK is 1.0.0 .","title":"Releases of the SO Comm SDK"},{"location":"ref/releases/#v100","text":"Diffs and changelog compared to v0.14.0: Remove FFMPEG dependency, close file descriptor for vide thumbnail parsing Include Apache 2.0 license Update dependencies, include ResubscribingReplayingShare as external dependency Version bump to 1.0.0","title":"v1.0.0"},{"location":"ref/releases/#v0140","text":"First public release. Should not be used anymore!","title":"v0.14.0"},{"location":"tut/requesting-an-api-key/","text":"Requesting an API key This tutorial will walk you trough the steps to request an API key. The main entry point is SWAROVSKI OPTIK developer site Work in progress This tutorial is currently not yet written. If you don't have an API Key already and you need this information, please don't hesitate to contact developers@swarovskoptik.com directly.","title":"Requesting an API key"},{"location":"tut/requesting-an-api-key/#requesting-an-api-key","text":"This tutorial will walk you trough the steps to request an API key. The main entry point is SWAROVSKI OPTIK developer site","title":"Requesting an API key"},{"location":"tut/requesting-an-api-key/#work-in-progress","text":"This tutorial is currently not yet written. If you don't have an API Key already and you need this information, please don't hesitate to contact developers@swarovskoptik.com directly.","title":"Work in progress"},{"location":"tut/using-the-example-application/","text":"Using the example application This tutorial should walk you trough the necessary steps to build and deploy the OpenAPI Developer Example Application . Prerequisite You must have a personal computer which is capable of building Android applications (This is possible on Windows, Linux and MacOS), an Android smartphone to run the example application, an AX Visio binocular and an personalized API key for using the OpenAPI contexts (See the tutorial Requesting an API key ). Step 0: Android Studio Setup If you are interested in the OpenAPI of the AX Visio you are mostly already an Android Application developer. So you should have a working AndroidStudio installation on your computer. If not, follow the guide Install Android Studio . Step 1: Clone the example code On your computer clone the example code. E.g. by executing the command $ git clone https://github.com/swarovskioptik/openapi-developer-example-app.git You can also use the Github CLI for that. Step 2: Open the project in Android Studio It's possible to build and deploy the project on the command line, but this tutorial we use Android Studio. It will provide some convenience features like selecting the development target and staring the smartphone application automatically. First open Android Studio by using the launcher menu of your operating system. Then click File > Open\u2026 in the top menu bar and select the directory of the freshly checkout repo. Android studio starts parsing and executing the gradle build system. This process will fail with the error message Please add 'OPENAPI_API_KEY' property! This is o.k. for now. It will be fixed in the next step. Step 3: Set the API key You must add your API key to the gradle build systems. First go into the root directory of the repository. Either with an file browser or in the left project window of Android Studio. Open the file local.properties . The file should already exist, because Android Studio created it when you first opened the project. If the file does not exist yet, you can also create it. After that add the following line to the end: OPENAPI_API_KEY = <Add your API key here> And replace the brackets with your API key. Now the parsing and executing of the gradle build system should finish successfully. Click Try Again in Android Studio to restart it. Step 4: Build the example application This can be either done on the command line or with Android Studio. The easiest way is to use Android Studio, because it also allows you to deploy and start the example application on your smartphone, too. In Android studio click Build > Make Project in the menu bar at the top. The application should built successfully. Step 5: Deploy it on your smartphone After building the application with your API key, you should run it on your smartphone. For that your smartphone must be in developer mode and connected to your computer. Either with a USB cable or with the wireless debugging feature of Android over Wi-Fi. For instructions please read the Run apps on a hardware device Guide for Android Studio. If your phone is setup and connected, you can deploy and run the application by clicking Run > Run 'app' from the menu bar at the top. On your smartphone you should see the following screen now: Step 6: Connect to the AX Visio Your freshly built example app is running on your smartphone now. The next steps are to connect the app with your AX Visio device. For that the example shows instructions on the screen that walks the user trough the process. In detail these are the following steps: Grant permissions and enable Bluetooth On the smartphone touch the Start Button to start the connection process. Now you should see a screen that tells the user to enable Bluetooth and grant the necessary runtime permissions. You should touch the button and grant the necessary permissions to the application. Then you should enable Bluetooth in the settings menu of your smartphone. When both requirements are fulfilled, the next screen appears. Search and connect to the AX Visio The next screen of the app tells the user to start the AX Visio. Long press the power of the AX Visio until you see that the status LED blinking green. The AX Visio is booting now. When the AX Visio runs and the smartphone has found the AX Visio device, the button on the screen is clickable and also shows the name the found device. Click the button to start the connection process. If you connect your smartphone with the AX Visio for the first time, your smartphone shows a pairing request in the notification area. Touch Pair & Connect to continue. To finish the pairing process, you must enter a PIN on the smartphones display. The PIN is shown in the display of the AX Visio. After entering the PIN and continued the dialog, you have finished the paring process. Start the OpenAPI Inside Application The example application is connected to the AV Visio. Now you have to start the OpenAPI Inside Application on the AX Visio. The example app also shows instructions on the screen. Rotate the mode selection wheel to the symbol of the OpenAPI. It looks like The OpenAPI is successfully started on the AX Visio, when you see the text \"Please Connect\" in the UI of the binocular. Trough the binocular you should see Then the Continue button in the example application is clickable, because the OpenAPI is available on the AX Visio. Touch the button to start the main screen of the example application. Step 7: Using the application Now the example app is connected to the AV Visio and uses the OpenAPI. You should see the screen: This means that your application succesfully connceted to the AX Visio and successfully used one feature of the OpenAPI: it configured a key to take a photo. Outlook Congratulations! Now you have built, deployed and ran your first Android application that used the OpenAPI of the AX Visio. As next steps you can look at the code of the example application or read one of the How-To guides.","title":"Using the example application"},{"location":"tut/using-the-example-application/#using-the-example-application","text":"This tutorial should walk you trough the necessary steps to build and deploy the OpenAPI Developer Example Application .","title":"Using the example application"},{"location":"tut/using-the-example-application/#prerequisite","text":"You must have a personal computer which is capable of building Android applications (This is possible on Windows, Linux and MacOS), an Android smartphone to run the example application, an AX Visio binocular and an personalized API key for using the OpenAPI contexts (See the tutorial Requesting an API key ).","title":"Prerequisite"},{"location":"tut/using-the-example-application/#step-0-android-studio-setup","text":"If you are interested in the OpenAPI of the AX Visio you are mostly already an Android Application developer. So you should have a working AndroidStudio installation on your computer. If not, follow the guide Install Android Studio .","title":"Step 0: Android Studio Setup"},{"location":"tut/using-the-example-application/#step-1-clone-the-example-code","text":"On your computer clone the example code. E.g. by executing the command $ git clone https://github.com/swarovskioptik/openapi-developer-example-app.git You can also use the Github CLI for that.","title":"Step 1: Clone the example code"},{"location":"tut/using-the-example-application/#step-2-open-the-project-in-android-studio","text":"It's possible to build and deploy the project on the command line, but this tutorial we use Android Studio. It will provide some convenience features like selecting the development target and staring the smartphone application automatically. First open Android Studio by using the launcher menu of your operating system. Then click File > Open\u2026 in the top menu bar and select the directory of the freshly checkout repo. Android studio starts parsing and executing the gradle build system. This process will fail with the error message Please add 'OPENAPI_API_KEY' property! This is o.k. for now. It will be fixed in the next step.","title":"Step 2: Open the project in Android Studio"},{"location":"tut/using-the-example-application/#step-3-set-the-api-key","text":"You must add your API key to the gradle build systems. First go into the root directory of the repository. Either with an file browser or in the left project window of Android Studio. Open the file local.properties . The file should already exist, because Android Studio created it when you first opened the project. If the file does not exist yet, you can also create it. After that add the following line to the end: OPENAPI_API_KEY = <Add your API key here> And replace the brackets with your API key. Now the parsing and executing of the gradle build system should finish successfully. Click Try Again in Android Studio to restart it.","title":"Step 3: Set the API key"},{"location":"tut/using-the-example-application/#step-4-build-the-example-application","text":"This can be either done on the command line or with Android Studio. The easiest way is to use Android Studio, because it also allows you to deploy and start the example application on your smartphone, too. In Android studio click Build > Make Project in the menu bar at the top. The application should built successfully.","title":"Step 4: Build the example application"},{"location":"tut/using-the-example-application/#step-5-deploy-it-on-your-smartphone","text":"After building the application with your API key, you should run it on your smartphone. For that your smartphone must be in developer mode and connected to your computer. Either with a USB cable or with the wireless debugging feature of Android over Wi-Fi. For instructions please read the Run apps on a hardware device Guide for Android Studio. If your phone is setup and connected, you can deploy and run the application by clicking Run > Run 'app' from the menu bar at the top. On your smartphone you should see the following screen now:","title":"Step 5: Deploy it on your smartphone"},{"location":"tut/using-the-example-application/#step-6-connect-to-the-ax-visio","text":"Your freshly built example app is running on your smartphone now. The next steps are to connect the app with your AX Visio device. For that the example shows instructions on the screen that walks the user trough the process. In detail these are the following steps:","title":"Step 6: Connect to the AX Visio"},{"location":"tut/using-the-example-application/#grant-permissions-and-enable-bluetooth","text":"On the smartphone touch the Start Button to start the connection process. Now you should see a screen that tells the user to enable Bluetooth and grant the necessary runtime permissions. You should touch the button and grant the necessary permissions to the application. Then you should enable Bluetooth in the settings menu of your smartphone. When both requirements are fulfilled, the next screen appears.","title":"Grant permissions and enable Bluetooth"},{"location":"tut/using-the-example-application/#search-and-connect-to-the-ax-visio","text":"The next screen of the app tells the user to start the AX Visio. Long press the power of the AX Visio until you see that the status LED blinking green. The AX Visio is booting now. When the AX Visio runs and the smartphone has found the AX Visio device, the button on the screen is clickable and also shows the name the found device. Click the button to start the connection process. If you connect your smartphone with the AX Visio for the first time, your smartphone shows a pairing request in the notification area. Touch Pair & Connect to continue. To finish the pairing process, you must enter a PIN on the smartphones display. The PIN is shown in the display of the AX Visio. After entering the PIN and continued the dialog, you have finished the paring process.","title":"Search and connect to the AX Visio"},{"location":"tut/using-the-example-application/#start-the-openapi-inside-application","text":"The example application is connected to the AV Visio. Now you have to start the OpenAPI Inside Application on the AX Visio. The example app also shows instructions on the screen. Rotate the mode selection wheel to the symbol of the OpenAPI. It looks like The OpenAPI is successfully started on the AX Visio, when you see the text \"Please Connect\" in the UI of the binocular. Trough the binocular you should see Then the Continue button in the example application is clickable, because the OpenAPI is available on the AX Visio. Touch the button to start the main screen of the example application.","title":"Start the OpenAPI Inside Application"},{"location":"tut/using-the-example-application/#step-7-using-the-application","text":"Now the example app is connected to the AV Visio and uses the OpenAPI. You should see the screen: This means that your application succesfully connceted to the AX Visio and successfully used one feature of the OpenAPI: it configured a key to take a photo.","title":"Step 7: Using the application"},{"location":"tut/using-the-example-application/#outlook","text":"Congratulations! Now you have built, deployed and ran your first Android application that used the OpenAPI of the AX Visio. As next steps you can look at the code of the example application or read one of the How-To guides.","title":"Outlook"}]}